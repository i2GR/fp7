package run;

import tasks.*;

import java.time.LocalDateTime;
import java.util.List;

/**
 * интерфейс управления задачами
 * устанавливает список методов, которые должны быть у любого объекта-менеджера
 */
public interface TaskManager {

    /**
     * Присвоение идентификатора новой задаче
     *
     * @return присваевамый идентификационный номер: id
     */
    int getNewTaskId();

    /**
     * Получение списка обычных задач (Task)
     *
     * @return список (List)
     * @see Task
     */
    List<Task> getAllTasks();

    /**
     * получение списка "эпик"-задач
     *
     * @return список (List)
     * @see EpicTask
     */
    List<EpicTask> getAllEpics();

    /**
     * получение списка подзадач
     *
     * @return список (List)
     * @see SubTask
     */
    List<SubTask> getAllSubs();

    /**
     * получение отдельной (простой) задачи (Task)
     *
     * @param id идентификатор получаемой задачи
     * @return объект "обычной" задачи
     * @see TaskManager#getNewTaskId()
     */
    Task getTaskById(int id);

    /**
     * получение эпичной задачи (EpicTask)
     *
     * @param id идентификатор получаемой задачи
     * @return объект "эпика"
     */
    EpicTask getEpicById(int id);

    /**
     * получение подзадачи
     *
     * @param id идентификатор подзадачи
     * @return объект получаемой подзадачи
     */
    SubTask getSubById(int id);

    /**
     * Создание обычной задачи
     *
     * @param task объект задачи
     *             возможно, при разработке дальнейшей логики также будет полезен
     *             например можно модифицировать возврат метод для идентификацией и обработки ошибки сохранения
     * @return идентификатор добавленной задачи
     */
    int addNewTask(Task task);

    /**
     * Создание обычной задачи
     *
     * @param epic объект задачи
     *             возможно, при разработке дальнейшей логики также будет полезен
     *             например можно модифицировать возврат метод для идентификацией и обработки ошибки сохранения
     * @return идентификатор добавленной эпик-задачи
     */
    int addNewEpic(EpicTask epic);

    /**
     * Создание обычной задачи
     *
     * @param sub объект задачи
     *            возможно, при разработке дальнейшей логики также будет полезен
     *            например можно модифицировать возврат метод для идентификацией и обработки ошибки сохранения
     * @return идентификатор добавленной подзадачи
     */
    int addNewSub(SubTask sub);

    /**
     * обновление обычной задачи
     *
     * @param task объект задачи
     *             возможно, при разработке дальнейшей логики также будет полезен
     *             например можно модифицировать возврат метод для идентификацией и обработки ошибки сохранения
     * @return идентификатор добавленной задачи
     */
    int updateTask(Task task);

    /**
     * обновление обычной задачи
     *
     * @param epic объект задачи
     *             возможно, при разработке дальнейшей логики также будет полезен
     *             например можно модифицировать возврат метод для идентификацией и обработки ошибки сохранения
     */
    int updateEpic(EpicTask epic);

    /**
     * обновление обычной задачи
     *
     * @param sub объект задачи
     *            возможно, при разработке дальнейшей логики также будет полезен
     *            например можно модифицировать возврат метод для идентификацией и обработки ошибки сохранения
     */
    int updateSub(SubTask sub);

    /**
     * удаление обычных задач из менеджера
     */
    void deleteAllTasks();

    /**
     * удаление "эпик"-задач из менеджера
     */
    void deleteAllEpics();

    /**
     * удаление подзадач из менеджера
     */
    void deleteAllSubs();

    /**
     * удаление обычной задачи по идетификатору
     *
     * @param id идентификатор задачи
     */
    void deleteTaskById(int id);

    /**
     * удаление "эпик"-задачи по идетификатору
     *
     * @param id идентификатор задачи
     */
    void deleteEpicById(int id);

    /**
     * удаление подзадачи по идетификатору
     *
     * @param id идентификатор задачи
     */
    void deleteSubById(int id);

    /**
     * получение списка подзадач для определенного "эпика"
     *
     * @param id идентификатор "эпика"
     * @return объект со списком подзадач для эпика
     */
    List<SubTask> getSubsForEpicId(int id);

    /**
     * получение статуса обычной задачи
     */
    Status getTaskStatus(int id);

    /**
     * получение статуса "эпик"-задачи
     */
    Status getEpicStatus(int id);

    /**
     * получение статуса подзадачи
     */
    Status getSubtaskStatus(int id);

    /**
     * удаление списка задач для заданного "эпика"
     *
     * @param epicId идентификатор "эпика"
     *               по ТЗ эпическая задача не удаляется.
     */
    void clearSubsListOfEpic(int epicId);

    /**
     * Получение времени окончания задачи
     * @param id идентификатор задачи
     * @return время окончания задачи
     */
    LocalDateTime getTaskEndTime(int id);

    /**
     * Получение времени окончания подзадачи
     * @param id идентификатор задачи
     * @return время окончания задачи
     */
    LocalDateTime getSubEndTime(int id);

    /**
     * Получение времени окончания эпик-задачи
     * @param id идентификатор задачи
     * @return время окончания задачи
     */
    LocalDateTime getEpicEndTime(int id);
    /**
     * добавление задачи в историю просмотров
     * по ТЗ вызывается при получении задач из методов получения задач (см. ниже)
     *
     * @param task объект задачи
     * @see TaskManager#getTaskById(int)
     * @see TaskManager#getEpicById(int)
     * @see TaskManager#getSubById(int)
     *
     * @return идентификатор добавляемой задачи
     */
    int addToHistory(AbstractTask task);

    /**
     * получение истории просмотренных задач
     *
     * @return в рамках ФП4 получение объекта со списком задач
     */
    List<AbstractTask> getHistory();

    /**
     * получения списка отсортированных задач (и подзадач)
     * сортировка по времени начала (поле startTime)
     * @return список (List) включающий экземпляры:
     * @see Task;
     * @see SubTask;
     */
    List<Task> getPrioritizedTasks();
}